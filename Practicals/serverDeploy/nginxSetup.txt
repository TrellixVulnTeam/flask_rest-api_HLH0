NGINX - Reverse proxy
  Acts as GW between application and user
  Accepts the request from user and decide what to do with request
  Communicated with uwgsi for mutli-threading function, allow multiple flask apps

1) install nginx as root
  root@flasksvr:~# apt-get install nginx

2) Set up firewall and allow Nginx
root@flasksvr:~# ufw status
Status: inactive
root@flasksvr:~# ufw enable
Command may disrupt existing ssh connections. Proceed with operation (y|n)? y
Firewall is active and enabled on system startup
root@flasksvr:~# ufw allow 'Nginx HTTP'
Rule added
Rule added (v6)
root@flasksvr:~#
root@flasksvr:~# ufw status
Status: active

To                         Action      From
--                         ------      ----
Nginx HTTP                 ALLOW       Anywhere
Nginx HTTP (v6)            ALLOW       Anywhere (v6)

3) Check nginx status
  systemctl status nginx

4) Create nginx configuration for flask app
  vi /etc/nginx/sites-available/items-rest.conf
  root@flasksvr:~# cat /etc/nginx/sites-available/items-rest.conf
server {                                # server block - server for flask app, listen to incoming request and dispatch
        listen 80;                        # port number to listen for request
        real_ip_header X-Forwarded-For;   # Forward the IP addr of requestor to flask app - nginx tells flask app who made the request
        set_real_ip_from 127.0.0.1;       # nginx say to flask app that request is coming from 127.0.0.1
        server_name localhost;            # server name

        location / {                      # Re-directing the incoming request
                include uwsgi_params;     # using uwsgi protocol for efficient multithreading
                uwsgi_pass unix:/var/www/html/items-rest/socket.sock;  # connecting point between flaskapp and nginx
                uwsgi_modifier1 30;       # Tells the thread when to die if they are blocked
        }

        error_page 404 /404.html          #error pages for error return codes
        location = /404.html {
                root /usr/share/nginx/html;
        }
        error_page 500 502 503 504 /50x.html
        location = /50x.html {
                root /usr/share/nginx/html;
        }
}

5) Link the config file with nginx site directory
  ln -s /etc/nginx/sites-available/items-rest.conf /etc/nginx/sites-enabled/

6) Create application directory
  mkdir /var/www/html/items-rest
  chown appadmin:appadmin /var/www/html/items-rest #appadmin owns this directory

7) Download app bundle of heroku and create log dir
git clone https://github.com/rizwan84tx/flask-deployment-udemy.git

8) Move all app files as below
appadmin@flasksvr:/var/www/html/items-rest$ ls -ll
total 52
-rw-rw-r-- 1 appadmin appadmin  818 Mar 24 14:20 app.py
-rw-rw-r-- 1 appadmin appadmin   59 Mar 24 14:20 db.py
drwxrwxr-x 5 appadmin appadmin 4096 Mar 24 14:18 flask-deployment-udemy
drwxrwxr-x 2 appadmin appadmin 4096 Mar 24 14:19 log
drwxrwxr-x 2 appadmin appadmin 4096 Mar 24 14:20 models
-rw-rw-r-- 1 appadmin appadmin   21 Mar 24 14:20 Procfile
-rw-rw-r-- 1 appadmin appadmin   25 Mar 24 14:20 README.md
-rw-rw-r-- 1 appadmin appadmin   53 Mar 24 14:20 requirements.txt
drwxrwxr-x 2 appadmin appadmin 4096 Mar 24 14:20 resources
-rw-rw-r-- 1 appadmin appadmin  124 Mar 24 14:20 run.py
-rw-rw-r-- 1 appadmin appadmin   13 Mar 24 14:20 runtime.txt
-rw-rw-r-- 1 appadmin appadmin  807 Mar 24 14:20 security.py
-rw-rw-r-- 1 appadmin appadmin  102 Mar 24 14:20 uwsgi.ini

9) As root install following
root@flasksvr:/var/www/html/items-rest# apt-get install python-pip python3-dev libpq-dev

10) Install virtualenv as root
root@flasksvrr:/var/www/html/items-rest$ apt-get install virtualenv

11) Create virtualenv VENV with python 3.6 as appadmin
appadmin@flasksvr:/var/www/html/items-rest$ virtualenv venv --python=python3.6

12) Activate VENV
appadmin@flasksvr:/var/www/html/items-rest$ source venv/bin/activate

13) Install application requirements
(venv) appadmin@flasksvr:/var/www/html/items-rest$ pip install -r requirements.txt
Successfully installed Flask-1.0.2 Flask-JWT-0.3.2 Flask-RESTful-0.3.7 Flask-SQLAlchemy-2.3.2 Jinja2-2.10 MarkupSafe-1.1.1 PyJWT-1.4.2 SQLAlchemy-1.3.1 Werkzeug-0.15.1 aniso8601-6.0.0 click-7.0 itsdangerous-1.1.0 pytz-2018.9 six-1.12.0 uwsgi-2.0.18
